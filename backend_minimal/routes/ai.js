const express = require('express');
const router = express.Router();
const { createClient } = require('@supabase/supabase-js');
const OpenAI = require('openai');

// Initialiser Supabase (pour sauvegarder les r√©sultats)
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY // Service key pour contourner RLS
);

// Initialiser OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// ============================================
// G√âN√âRATION D'EXERCICES
// ============================================

router.post('/generate-exercises', async (req, res) => {
  try {
    const {
      courseId,
      grade,
      topic,
      difficulty = 'moyen',
      type = 'qcm',
      count = 1
    } = req.body;

    // Validation
    if (!courseId || !grade || !topic) {
      return res.status(400).json({
        success: false,
        message: 'courseId, grade et topic sont requis'
      });
    }

    // Cr√©er le prompt pour OpenAI
    const prompt = `
G√©n√®re ${count} exercice(s) de math√©matiques en fran√ßais avec les caract√©ristiques suivantes :
- Niveau : ${grade}
- Th√®me : ${topic}
- Difficult√© : ${difficulty}
- Type : ${type}

Pour chaque exercice, fournis :
1. Un titre court et clair
2. Une description (optionnelle)
3. La question d√©taill√©e
4. La r√©ponse correcte
5. Une explication d√©taill√©e de la solution
6. 3 indices progressifs
${type === 'qcm' ? '7. 4 options de r√©ponse (A, B, C, D) dont une seule correcte' : ''}

Formate ta r√©ponse en JSON valide selon ce sch√©ma :
{
  "exercises": [
    {
      "title": "string",
      "description": "string",
      "question": "string",
      "answer": "string",
      "explanation": "string",
      "hints": ["hint1", "hint2", "hint3"],
      ${type === 'qcm' ? '"options": {"A": "option1", "B": "option2", "C": "option3", "D": "option4"},' : ''}
      "points": number (entre 5 et 20)
    }
  ]
}
`;

    console.log('ü§ñ G√©n√©ration d\'exercices avec OpenAI...');
    
    // Appel √† OpenAI
    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        {
          role: 'system',
          content: 'Tu es un professeur de math√©matiques expert qui cr√©e des exercices p√©dagogiques pour des coll√©giens fran√ßais. R√©ponds uniquement en JSON valide.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 2000
    });

    const content = completion.choices[0].message.content;
    const parsedData = JSON.parse(content);

    // Sauvegarder dans Supabase
    const exercisesToInsert = parsedData.exercises.map(ex => ({
      course_id: courseId,
      title: ex.title,
      description: ex.description || null,
      question: ex.question,
      answer: ex.answer,
      explanation: ex.explanation,
      difficulty: difficulty,
      points: ex.points || 10,
      type: type,
      hints: ex.hints || [],
      options: ex.options || null,
      ai_generated: true,
      is_published: false // √Ä publier manuellement par un professeur
    }));

    const { data, error } = await supabase
      .from('exercises')
      .insert(exercisesToInsert)
      .select();

    if (error) {
      throw new Error(`Erreur Supabase: ${error.message}`);
    }

    console.log(`‚úÖ ${data.length} exercice(s) g√©n√©r√©(s) et sauvegard√©(s)`);

    res.json({
      success: true,
      message: `${data.length} exercice(s) g√©n√©r√©(s) avec succ√®s`,
      count: data.length,
      exercises: data,
      usage: {
        tokens: completion.usage.total_tokens,
        cost: (completion.usage.total_tokens * 0.00003).toFixed(4) // Estimation GPT-4
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration exercices:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la g√©n√©ration des exercices',
      error: error.message
    });
  }
});

// ============================================
// G√âN√âRATION DE CONTENU DE COURS
// ============================================

router.post('/generate-course-content', async (req, res) => {
  try {
    const {
      title,
      grade,
      topic,
      difficulty = 'moyen',
      duration = 30
    } = req.body;

    if (!title || !grade || !topic) {
      return res.status(400).json({
        success: false,
        message: 'title, grade et topic sont requis'
      });
    }

    const prompt = `
Cr√©e un cours de math√©matiques complet en fran√ßais pour le niveau ${grade} sur le th√®me "${topic}" avec le titre "${title}".

Le cours doit durer environ ${duration} minutes et √™tre de difficult√© ${difficulty}.

Structure le cours avec :
1. Introduction (objectifs du cours)
2. Pr√©requis
3. Contenu principal (th√©orie, d√©finitions, propri√©t√©s)
4. Exemples concrets
5. M√©thodes et astuces
6. Pi√®ges √† √©viter
7. R√©sum√©

Formate ta r√©ponse en JSON :
{
  "title": "string",
  "description": "string (2-3 phrases)",
  "content": "string (markdown format√©)",
  "prerequisites": ["string"],
  "learning_objectives": ["string"],
  "key_concepts": ["string"]
}
`;

    console.log('ü§ñ G√©n√©ration de contenu de cours...');

    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        {
          role: 'system',
          content: 'Tu es un professeur de math√©matiques expert qui cr√©e des cours p√©dagogiques structur√©s pour des coll√©giens fran√ßais. R√©ponds en JSON valide.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.6,
      max_tokens: 3000
    });

    const content = completion.choices[0].message.content;
    const parsedData = JSON.parse(content);

    // Optionnel : sauvegarder directement le cours dans Supabase
    // D√©commenter si vous voulez cr√©er le cours automatiquement

    /*
    const { data, error } = await supabase
      .from('courses')
      .insert({
        title: parsedData.title,
        description: parsedData.description,
        content: parsedData.content,
        grade: grade,
        topic: topic,
        difficulty: difficulty,
        duration: duration,
        is_published: false
      })
      .select()
      .single();

    if (error) throw error;
    */

    console.log('‚úÖ Contenu de cours g√©n√©r√©');

    res.json({
      success: true,
      message: 'Contenu de cours g√©n√©r√© avec succ√®s',
      course: parsedData,
      usage: {
        tokens: completion.usage.total_tokens,
        cost: (completion.usage.total_tokens * 0.00003).toFixed(4)
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration cours:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la g√©n√©ration du cours',
      error: error.message
    });
  }
});

// ============================================
// AM√âLIORATION D'UN EXERCICE EXISTANT
// ============================================

router.post('/improve-exercise', async (req, res) => {
  try {
    const { exerciseId } = req.body;

    if (!exerciseId) {
      return res.status(400).json({
        success: false,
        message: 'exerciseId est requis'
      });
    }

    // R√©cup√©rer l'exercice
    const { data: exercise, error } = await supabase
      .from('exercises')
      .select('*')
      .eq('id', exerciseId)
      .single();

    if (error || !exercise) {
      return res.status(404).json({
        success: false,
        message: 'Exercice non trouv√©'
      });
    }

    const prompt = `
Am√©liore cet exercice de math√©matiques :

Titre : ${exercise.title}
Question : ${exercise.question}
R√©ponse : ${exercise.answer}
Explication : ${exercise.explanation || 'Aucune'}

Suggestions d'am√©lioration :
1. Rendre la question plus claire
2. Ajouter des d√©tails pertinents
3. Am√©liorer l'explication
4. Ajouter des indices utiles
5. Rendre l'exercice plus p√©dagogique

Retourne en JSON :
{
  "improved_question": "string",
  "improved_explanation": "string",
  "improved_hints": ["hint1", "hint2", "hint3"],
  "suggestions": ["suggestion1", "suggestion2"]
}
`;

    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        {
          role: 'system',
          content: 'Tu es un expert en p√©dagogie des math√©matiques. Am√©liore les exercices pour les rendre plus clairs et p√©dagogiques.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.5,
      max_tokens: 1500
    });

    const improvements = JSON.parse(completion.choices[0].message.content);

    res.json({
      success: true,
      message: 'Suggestions d\'am√©lioration g√©n√©r√©es',
      original: {
        question: exercise.question,
        explanation: exercise.explanation,
        hints: exercise.hints
      },
      improved: improvements,
      usage: {
        tokens: completion.usage.total_tokens
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur am√©lioration exercice:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de l\'am√©lioration',
      error: error.message
    });
  }
});

// ============================================
// G√âN√âRATION DE FEEDBACK PERSONNALIS√â
// ============================================

router.post('/generate-feedback', async (req, res) => {
  try {
    const { exerciseId, userAnswer, isCorrect } = req.body;

    if (!exerciseId || !userAnswer) {
      return res.status(400).json({
        success: false,
        message: 'exerciseId et userAnswer sont requis'
      });
    }

    // R√©cup√©rer l'exercice
    const { data: exercise } = await supabase
      .from('exercises')
      .select('*')
      .eq('id', exerciseId)
      .single();

    if (!exercise) {
      return res.status(404).json({
        success: false,
        message: 'Exercice non trouv√©'
      });
    }

    const prompt = `
Question : ${exercise.question}
R√©ponse correcte : ${exercise.answer}
R√©ponse de l'√©l√®ve : ${userAnswer}
R√©sultat : ${isCorrect ? 'Correct' : 'Incorrect'}

G√©n√®re un feedback personnalis√© et encourageant pour l'√©l√®ve.
Si la r√©ponse est incorrecte, explique l'erreur et guide vers la bonne solution sans donner la r√©ponse directement.
Si la r√©ponse est correcte, f√©licite et donne une astuce suppl√©mentaire.

R√©ponds en JSON :
{
  "feedback": "string (2-3 phrases)",
  "encouragement": "string",
  "next_steps": "string"
}
`;

    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo', // GPT-3.5 suffit pour le feedback
      messages: [
        {
          role: 'system',
          content: 'Tu es un professeur bienveillant qui donne des feedbacks constructifs et encourageants.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 300
    });

    const feedback = JSON.parse(completion.choices[0].message.content);

    res.json({
      success: true,
      feedback: feedback
    });

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration feedback:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la g√©n√©ration du feedback',
      error: error.message
    });
  }
});

module.exports = router;




